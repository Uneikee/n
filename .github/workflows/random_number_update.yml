name: Random Number Update

on:
  schedule:
    - cron: '*/1 * * * *'  # Executa a cada 1 minuto
  workflow_dispatch:  # Permite execução manual

jobs:
  update-json:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Criar pasta economy se não existir
        run: mkdir -p economy  # Cria a pasta economy se não existir

      - name: Gerar números aleatórios e atualizar os JSONs
        run: |
          declare -A CONFIGS
          CONFIGS["economy/stable.json"]="50 2 3"        
          CONFIGS["economy/intermediary.json"]="150 4 5" 
          CONFIGS["economy/unstable.json"]="500 6 7"     

          for FILE in "${!CONFIGS[@]}"; do
            MAX_NUM=$(echo "${CONFIGS[$FILE]}" | cut -d' ' -f1)
            LOSS_CHANCE=$(echo "${CONFIGS[$FILE]}" | cut -d' ' -f2)
            UPDATE_CHANCE=$(echo "${CONFIGS[$FILE]}" | cut -d' ' -f3)

            if [ $((RANDOM % 10)) -ge $UPDATE_CHANCE ]; then
              echo "Nenhuma atualização para $FILE"
              continue
            fi

            RANDOM_NUMBER=$((RANDOM % (MAX_NUM + 1)))
            TIMESTAMP=$(date +%s)

            if [ $((RANDOM % 10)) -lt $LOSS_CHANCE ]; then
              TYPE="loss"
            else
              TYPE="gain"
            fi

            VARIANT="normal"
            if [ $((RANDOM % 10)) -lt 3 ]; then
              VARIANT="volatile"
            fi

            if [ ! -f $FILE ]; then
              echo '{"current": {}, "total": {"loss": 0, "gain": 0, "loss_count": 0, "gain_count": 0, "calculation": 0}, "old": []}' > $FILE
            fi

            CURRENT_NUMBER=$(jq '.current.number // 0' $FILE)
            CURRENT_TIMESTAMP=$(jq '.current.timestamp // 0' $FILE)
            CURRENT_TYPE=$(jq -r '.current.type // "unknown"' $FILE)
            CURRENT_VARIANT=$(jq -r '.current.variant // "normal"' $FILE)
            CURRENT_CALCULATION=$(jq '.total.calculation // 0' $FILE)

            OLD_COUNT=$(jq '.old | length' $FILE)

            if [ "$OLD_COUNT" -ge 100 ]; then
              echo "Limpeza automática: Removendo todos os registros antigos em $FILE"
              jq '.old = []' $FILE > temp.json && mv temp.json $FILE
            fi

            # Garantir que o variant e o calculation estejam presentes, se não, atribuir valores padrão
            if [ -z "$CURRENT_VARIANT" ]; then
              CURRENT_VARIANT="normal"
            fi
            if [ -z "$CURRENT_CALCULATION" ]; then
              CURRENT_CALCULATION=0
            fi

            # Adicionar o novo item ao old
            jq ".old = .old + [{\"number\": $CURRENT_NUMBER, \"timestamp\": $CURRENT_TIMESTAMP, \"type\": \"$CURRENT_TYPE\", \"variant\": \"$CURRENT_VARIANT\", \"calculation\": $CURRENT_CALCULATION}]" $FILE > temp.json && mv temp.json $FILE

            # Atualizar a seção current
            jq ".current = {\"number\": $RANDOM_NUMBER, \"timestamp\": $TIMESTAMP, \"type\": \"$TYPE\", \"variant\": \"$VARIANT\"}" $FILE > temp.json && mv temp.json $FILE

            TOTAL_LOSS=$(jq '[.old[] | select(.type=="loss") | .number] | add // 0' $FILE)
            TOTAL_GAIN=$(jq '[.old[] | select(.type=="gain") | .number] | add // 0' $FILE)

            if [ "$TYPE" == "loss" ]; then
              TOTAL_LOSS=$((TOTAL_LOSS + RANDOM_NUMBER))
              LOSS_COUNT=$(jq '.total.loss_count // 0' $FILE)
              LOSS_COUNT=$((LOSS_COUNT + 1))
              GAIN_COUNT=$(jq '.total.gain_count // 0' $FILE)
              CURRENT_CALCULATION=$((CURRENT_CALCULATION - RANDOM_NUMBER))
            else
              TOTAL_GAIN=$((TOTAL_GAIN + RANDOM_NUMBER))
              GAIN_COUNT=$(jq '.total.gain_count // 0' $FILE)
              GAIN_COUNT=$((GAIN_COUNT + 1))
              LOSS_COUNT=$(jq '.total.loss_count // 0' $FILE)
              CURRENT_CALCULATION=$((CURRENT_CALCULATION + RANDOM_NUMBER))
            fi

            jq ".total = {\"loss\": $TOTAL_LOSS, \"gain\": $TOTAL_GAIN, \"loss_count\": $LOSS_COUNT, \"gain_count\": $GAIN_COUNT, \"calculation\": $CURRENT_CALCULATION}" $FILE > temp.json && mv temp.json $FILE

            echo "Conteúdo atualizado de $FILE:"
            cat $FILE
          done

      - name: Commit e push dos arquivos atualizados
        uses: EndBug/add-and-commit@v7
        with:
          author_name: 'GitHub Actions'
          author_email: 'actions@github.com'
          message: 'Atualizando arquivos JSON na pasta economy'
