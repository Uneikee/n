name: Random Number Update

on:
  schedule:
    - cron: '*/1 * * * *'  # Executa a cada 1 minuto
  workflow_dispatch:  # Permite execução manual

jobs:
  update-json:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Criar pasta economy se não existir
        run: |
          mkdir -p economy  # Cria a pasta economy se não existir

      - name: Gerar números aleatórios e atualizar os JSONs
        run: |
          # Lista de arquivos JSON, limites, chances de atualização e volatilidade
          declare -A CONFIGS
          CONFIGS["economy/stable.json"]="50 2 3 0.05"        # Máx 50, 20% loss, 30% chance de atualizar, volatilidade 5%
          CONFIGS["economy/intermediary.json"]="150 4 5 0.1"   # Máx 150, 45% loss, 50% chance de atualizar, volatilidade 10%
          CONFIGS["economy/unstable.json"]="500 6 7 0.15"      # Máx 500, 65% loss, 70% chance de atualizar, volatilidade 15%

          for FILE in "${!CONFIGS[@]}"; do
            # Define limites, chance de "loss", chance de atualização e volatilidade
            MAX_NUM=$(echo "${CONFIGS[$FILE]}" | cut -d' ' -f1)
            LOSS_CHANCE=$(echo "${CONFIGS[$FILE]}" | cut -d' ' -f2)
            UPDATE_CHANCE=$(echo "${CONFIGS[$FILE]}" | cut -d' ' -f3)
            VOLATILITY=$(echo "${CONFIGS[$FILE]}" | cut -d' ' -f4)

            # Verifica se o arquivo será atualizado nesta execução (com volatilidade)
            if [ $((RANDOM % 10)) -ge $UPDATE_CHANCE ]; then
              echo "Mercado estável. Nenhuma atualização para $FILE"
              continue
            fi

            # Varia o limite de valor dentro da faixa da volatilidade
            VARIATION=$((RANDOM % (MAX_NUM * VOLATILITY) + 1))
            NEW_MAX=$((MAX_NUM + VARIATION))

            # Gera número aleatório dentro do novo limite
            RANDOM_NUMBER=$((RANDOM % (NEW_MAX + 1)))

            # Gera o timestamp atual
            TIMESTAMP=$(date +%s)

            # Define o tipo (X% de chance de "loss")
            if [ $((RANDOM % 10)) -lt $LOSS_CHANCE ]; then
              TYPE="loss"
            else
              TYPE="gain"
            fi

            # Se o arquivo não existir, cria um JSON inicial
            if [ ! -f $FILE ]; then
              echo '{"current": {}, "total": {"loss": 0, "gain": 0, "loss_count": 0, "gain_count": 0}, "old": []}' > $FILE
            fi

            # Lê os dados atuais do JSON
            CURRENT_NUMBER=$(jq '.current.number' $FILE)
            CURRENT_TIMESTAMP=$(jq '.current.timestamp' $FILE)
            CURRENT_TYPE=$(jq -r '.current.type' $FILE)

            # Move o current para "old" se já existir (adicionando no topo)
            if [ "$CURRENT_NUMBER" != "null" ]; then
              jq ".old = [{\"number\": $CURRENT_NUMBER, \"timestamp\": $CURRENT_TIMESTAMP, \"type\": \"$CURRENT_TYPE\"}] + .old" $FILE > temp.json && mv temp.json $FILE
            fi

            # Atualiza o "current" com o novo número
            jq ".current = {\"number\": $RANDOM_NUMBER, \"timestamp\": $TIMESTAMP, \"type\": \"$TYPE\"}" $FILE > temp.json && mv temp.json $FILE

            # Recalcula os totais de loss e gain somando os números
            TOTAL_LOSS=$(jq '[.old[] | select(.type=="loss") | .number] | add // 0' $FILE)
            TOTAL_GAIN=$(jq '[.old[] | select(.type=="gain") | .number] | add // 0' $FILE)

            # Adiciona o current no total
            if [ "$TYPE" == "loss" ]; then
              TOTAL_LOSS=$((TOTAL_LOSS + RANDOM_NUMBER))
              LOSS_COUNT=$(jq '.total.loss_count' $FILE)
              LOSS_COUNT=$((LOSS_COUNT + 1))
              GAIN_COUNT=$(jq '.total.gain_count' $FILE)
            else
              TOTAL_GAIN=$((TOTAL_GAIN + RANDOM_NUMBER))
              GAIN_COUNT=$(jq '.total.gain_count' $FILE)
              GAIN_COUNT=$((GAIN_COUNT + 1))
              LOSS_COUNT=$(jq '.total.loss_count' $FILE)
            fi

            # Ajuste para manter a igualdade entre perda e ganho
            EQUAL_TOTAL=$(($TOTAL_GAIN > $TOTAL_LOSS ? $TOTAL_GAIN : $TOTAL_LOSS))

            # Atualiza o "total" abaixo do "current"
            jq ".total = {\"loss\": $EQUAL_TOTAL, \"gain\": $EQUAL_TOTAL, \"loss_count\": $LOSS_COUNT, \"gain_count\": $GAIN_COUNT}" $FILE > temp.json && mv temp.json $FILE

            # Exibe o conteúdo atualizado para debug
            echo "Conteúdo atualizado de $FILE:"
            cat $FILE
          done

      - name: Commit e push dos arquivos atualizados
        uses: EndBug/add-and-commit@v7
        with:
          author_name: 'GitHub Actions'
          author_email: 'actions@github.com'
          message: 'Atualizando stable.json, intermediary.json e unstable.json na pasta economy'
